version: '3.8'

services:
  # Redis Cluster Services
  redis_1:
    image: 'redis:latest'
    container_name: redis_1
    ports:
      - "6379"
    volumes:
      - redis_1_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      redis-net:
        ipv4_address: 173.18.0.10

  redis_2:
    image: 'redis:latest'
    container_name: redis_2
    ports:
      - "6379"
    volumes:
      - redis_2_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      redis-net:
        ipv4_address: 173.18.0.11

  redis_3:
    image: 'redis:latest'
    container_name: redis_3
    ports:
      - "6379"
    volumes:
      - redis_3_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      redis-net:
        ipv4_address: 173.18.0.12
  
  # Ephemeral container to create the Redis cluster connections.
  # Once the setup is done, this container shuts down
  # and the cluster can be used by the service app container
  cluster_initiator:
    container_name: cluster_initiator
    build:
      context: ./docker/redis
      dockerfile: Dockerfile
    tty: true
    depends_on:
      - redis_1
      - redis_2
      - redis_3
    networks:
      redis-net:
        ipv4_address: 173.18.0.13
  # Other services unchanged...
  nest-api:
    build: .
    container_name: nest-api
    restart: always
    ports:
      - 3000:3000
    env_file:
      - ./.env
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - redis-net

volumes:
  redis_1_data: {}
  redis_2_data: {}
  redis_3_data: {}
  db_data: {}
  

networks:
  redis-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.18.0.0/16